library('biomaRt')
library(readr)
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
# Upregulated
upregulated <- read_csv("Documents/TFM/GitHub/HB_PublicData/1-Obtaining-DEGs-for-HB/DEGs_HB/HB_db_DEG_Upregulated.csv", col_types = cols_only(Name = col_guess()))
upregulated <- upregulated$Name
upregulated <- getBM(filters= "hgnc_symbol", attributes= c("hgnc_symbol","ensembl_gene_id"),values=upregulated,mart= mart)
write.table(upregulated, file="Documents/TFM/GitHub/HB_PublicData/1-Obtaining-DEGs-for-HB/DEGs_HB/upregulated_translated.csv", sep="\t")
# Downregulated
downregulated <- read_csv("Documents/TFM/GitHub/HB_PublicData/1-Obtaining-DEGs-for-HB/DEGs_HB/HB_db_DEG_Downregulated.csv", col_types = cols_only(Name = col_guess()))
downregulated <- downregulated$Name
downregulated <- getBM(filters= "hgnc_symbol", attributes= c("hgnc_symbol","ensembl_gene_id"),values=downregulated,mart= mart)
write.table(downregulated, file="Documents/TFM/GitHub/HB_PublicData/1-Obtaining-DEGs-for-HB/DEGs_HB/downregulated_translated.csv", sep="\t")
library('biomaRt')
library(readr)
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
# Upregulated
upregulated <- read_csv("Documents/TFM/GitHub/HB_PublicData/1-Obtaining-DEGs-for-HB/DEGs_HB/HB_db_DEG_Upregulated.csv", col_types = cols_only(Name = col_guess()))
upregulated <- upregulated$Name
upregulated <- getBM(filters= "hgnc_symbol", attributes= c("hgnc_symbol","ensembl_gene_id","entrezgene_id"),values=upregulated,mart= mart)
write.table(upregulated, file="Documents/TFM/GitHub/HB_PublicData/1-Obtaining-DEGs-for-HB/DEGs_HB/upregulated_translated.csv", sep="\t")
# Downregulated
downregulated <- read_csv("Documents/TFM/GitHub/HB_PublicData/1-Obtaining-DEGs-for-HB/DEGs_HB/HB_db_DEG_Downregulated.csv", col_types = cols_only(Name = col_guess()))
downregulated <- downregulated$Name
downregulated <- getBM(filters= "hgnc_symbol", attributes= c("hgnc_symbol","ensembl_gene_id","entrezgene_id"),values=downregulated,mart= mart)
write.table(downregulated, file="Documents/TFM/GitHub/HB_PublicData/1-Obtaining-DEGs-for-HB/DEGs_HB/downregulated_translated.csv", sep="\t")
## block with some startup/background objects functions
library(umap)
plot.iris = function(x, labels,
main="A UMAP visualization of the Iris dataset",
colors=c("#ff7f00", "#e377c2", "#17becf"),
pad=0.1, cex=0.6, pch=19, add=FALSE, legend.suffix="",
cex.main=1, cex.legend=0.85) {
layout = x
if (is(x, "umap")) {
layout = x$layout
}
xylim = range(layout)
xylim = xylim + ((xylim[2]-xylim[1])*pad)*c(-0.5, 0.5)
if (!add) {
par(mar=c(0.2,0.7,1.2,0.7), ps=10)
plot(xylim, xylim, type="n", axes=F, frame=F)
rect(xylim[1], xylim[1], xylim[2], xylim[2], border="#aaaaaa", lwd=0.25)
}
points(layout[,1], layout[,2], col=colors[as.integer(labels)],
cex=cex, pch=pch)
mtext(side=3, main, cex=cex.main)
labels.u = unique(labels)
legend.pos = "topleft"
legend.text = as.character(labels.u)
if (add) {
legend.pos = "bottomleft"
legend.text = paste(as.character(labels.u), legend.suffix)
}
legend(legend.pos, legend=legend.text, inset=0.03,
col=colors[as.integer(labels.u)],
bty="n", pch=pch, cex=cex.legend)
}
set.seed(123456)
head(iris, 3)
iris.data = iris[, grep("Sepal|Petal", colnames(iris))]
iris.labels = iris[, "Species"]
library(umap)
iris.umap = umap(iris.data)
iris.umap
head(iris.umap$layout, 3)
plot.iris(iris.umap, iris.labels)
iris.wnoise = iris.data + matrix(rnorm(150*40, 0, 0.1), ncol=4)
colnames(iris.wnoise) = colnames(iris.data)
head(iris.wnoise, 3)
iris.wnoise.umap = predict(iris.umap, iris.wnoise)
head(iris.wnoise.umap, 3)
plot.iris(iris.umap, iris.labels)
plot.iris(iris.wnoise.umap, iris.labels, add=T, pch=4, legend.suffix=" (with noise)")
umap.defaults
custom.config = umap.defaults
custom.config$random_state = 123
iris.umap.config = umap(iris.data, config=custom.config)
plot.iris(iris.umap.config, iris.labels,
main="Another UMAP visualization (different seed)")
iris.dist = as.matrix(dist(iris.data))
iris.umap.dist = umap(iris.dist, config=custom.config, input="dist")
iris.umap.dist
iris.umap$knn
# extract information on 10 nearest neighbors from iris.umap
iris.neighbors = iris.umap$knn$indexes[, 1:10]
iris.neighbors.distances = iris.umap$knn$distances[, 1:10]
# construct an object with indexes and distances
iris.knn.10 = umap.knn(indexes=iris.neighbors, distances=iris.neighbors.distances)
iris.knn.10
# perform an embedding using the precomputed nearest neighbors
iris.umap.knn = umap(iris.data, config=custom.config, n_neighbors=10, knn=iris.knn.10)
# predict in batch, display first item
predict(iris.umap, iris.wnoise)[1, , drop=FALSE]
# predict only first item
predict(iris.umap, iris.wnoise[1,,drop=FALSE])
plot.iris
sessionInfo()
setwd("~/Documents/TFM/GitHub/HB_PublicData")
# Load packages
library(readr)
library(tidyr)
# Load data
## GSE133039
### Import Matrix
GSE133039_data <- read_csv("1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/norm_matrices/norm_GREIN_GSE133039.csv")
### Clean Matrix
GSE133039_data <- aggregate(GSE133039_data[,-1], list(GSE133039_data$gene_symbol), mean)
rownames(GSE133039_data) <- GSE133039_data$Group.1
GSE133039_data <- subset(GSE133039_data, select = -Group.1 )
### Import Metadata
GSE133039_meta <- read.csv('1-Obtaining-DEGs-for-HB/Metadata_HB/GSE133039_metadata.csv', row.names=1)
all(rownames(GSE133039_meta) %in% colnames(GSE133039_data))
GSE133039_data <- GSE133039_data[, rownames(GSE133039_meta)]
all(rownames(GSE133039_meta) == colnames(GSE133039_data))
### Transform groups
for (i in colnames(GSE133039_data)){
names(GSE133039_data)[names(GSE133039_data) == i] <- GSE133039_meta[i,]
}
## GSE104766
### Import Matrix
GSE104766_data <- read_csv("1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/norm_matrices/norm_GREIN_GSE104766.csv")
### Clean Matrix
GSE104766_data <- aggregate(GSE104766_data[,-1], list(GSE104766_data$gene_symbol), mean)
rownames(GSE104766_data) <-GSE104766_data$Group.1
GSE104766_data <- subset(GSE104766_data, select = -Group.1 )
### Import Metadata
GSE104766_meta <- read.csv('1-Obtaining-DEGs-for-HB/Metadata_HB/GSE104766_metadata.csv', row.names=1)
all(rownames(GSE104766_meta) %in% colnames(GSE104766_data))
GSE104766_data <- GSE104766_data[, rownames(GSE104766_meta)]
all(rownames(GSE104766_meta) == colnames(GSE104766_data))
### Transform groups
for (i in colnames(GSE104766_data)){
names(GSE104766_data)[names(GSE104766_data) == i] <- GSE104766_meta[i,]
}
# Obtain mean expression data
## GSE133039
GSE133039_means <- as.data.frame( # sapply returns a list here, so we convert it to a data.frame
sapply(unique(names(GSE133039_data)), # for each unique column name
function(col) rowMeans(GSE133039_data[names(GSE133039_data) == col]) # calculate row means
)
)
View(GSE133039_means)
StudyA_NT <- GSE133039_means['Normal']
StudyA_NT['Study'] = 'Study A'
View(StudyA_NT)
StudyA_NT <- GSE133039_means['Normal']
StudyA_NT['Study'] = 'Study A'
#colnames(GSE133039_NT) <- c("Normal", 'Study A')
write.csv(StudyA_NT,"1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/StudyA_NT.csv", row.names = FALSE)
StudyA_T <- StudyA_means['Hepatoblastoma']
StudyA_T['Study'] = 'Study A'
#colnames(GSE133039_T) <- c("GSE133039", 'Tissue')
write.csv(StudyA_T,"1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/StudyA_T.csv", row.names = FALSE)
setwd("~/Documents/TFM/GitHub/HB_PublicData")
# Load packages
library(readr)
library(tidyr)
# Load data
## GSE133039
### Import Matrix
GSE133039_data <- read_csv("1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/norm_matrices/norm_GREIN_GSE133039.csv")
### Clean Matrix
GSE133039_data <- aggregate(GSE133039_data[,-1], list(GSE133039_data$gene_symbol), mean)
rownames(GSE133039_data) <- GSE133039_data$Group.1
GSE133039_data <- subset(GSE133039_data, select = -Group.1 )
### Import Metadata
GSE133039_meta <- read.csv('1-Obtaining-DEGs-for-HB/Metadata_HB/GSE133039_metadata.csv', row.names=1)
all(rownames(GSE133039_meta) %in% colnames(GSE133039_data))
GSE133039_data <- GSE133039_data[, rownames(GSE133039_meta)]
all(rownames(GSE133039_meta) == colnames(GSE133039_data))
### Transform groups
for (i in colnames(GSE133039_data)){
names(GSE133039_data)[names(GSE133039_data) == i] <- GSE133039_meta[i,]
}
## GSE104766
### Import Matrix
GSE104766_data <- read_csv("1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/norm_matrices/norm_GREIN_GSE104766.csv")
### Clean Matrix
GSE104766_data <- aggregate(GSE104766_data[,-1], list(GSE104766_data$gene_symbol), mean)
rownames(GSE104766_data) <-GSE104766_data$Group.1
GSE104766_data <- subset(GSE104766_data, select = -Group.1 )
### Import Metadata
GSE104766_meta <- read.csv('1-Obtaining-DEGs-for-HB/Metadata_HB/GSE104766_metadata.csv', row.names=1)
all(rownames(GSE104766_meta) %in% colnames(GSE104766_data))
GSE104766_data <- GSE104766_data[, rownames(GSE104766_meta)]
all(rownames(GSE104766_meta) == colnames(GSE104766_data))
### Transform groups
for (i in colnames(GSE104766_data)){
names(GSE104766_data)[names(GSE104766_data) == i] <- GSE104766_meta[i,]
}
# Obtain mean expression data
## GSE133039
GSE133039_means <- as.data.frame( # sapply returns a list here, so we convert it to a data.frame
sapply(unique(names(GSE133039_data)), # for each unique column name
function(col) rowMeans(GSE133039_data[names(GSE133039_data) == col]) # calculate row means
)
)
StudyA_NT <- GSE133039_means['Normal']
StudyA_NT['Study'] = 'Study A'
#colnames(GSE133039_NT) <- c("Normal", 'Study A')
write.csv(StudyA_NT,"1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/StudyA_NT.csv", row.names = FALSE)
StudyA_T <- GSE133039_means['Hepatoblastoma']
StudyA_T['Study'] = 'Study A'
#colnames(GSE133039_T) <- c("GSE133039", 'Tissue')
write.csv(StudyA_T,"1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/StudyA_T.csv", row.names = FALSE)
#GSE133039_df <- rbind(GSE133039_T, GSE133039_NT)
#write.csv(GSE133039_df,"1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/GSE133039_df.csv", row.names = FALSE)
## GSE104766
GSE104766_means <- as.data.frame( # sapply returns a list here, so we convert it to a data.frame
sapply(unique(names(GSE104766_data)), # for each unique column name
function(col) rowMeans(GSE104766_data[names(GSE104766_data) == col]) # calculate row means
)
)
StudyB_NT <- GSE104766_means['Normal']
StudyB_NT['Study'] = 'Study B'
write.csv(StudyB_NT,"1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/StudyB_NT.csv", row.names = FALSE)
StudyB_T <- GSE104766_means['Hepatoblastoma']
StudyB_T['Study'] = 'Study B'
write.csv(StudyB_T,"1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/StudyB_T.csv", row.names = FALSE)
setwd("~/Documents/TFM/GitHub/HB_PublicData")
library(readr)
HB <- as.data.frame(read_csv("1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/NT.csv", col_types = cols(Tissue = col_factor(levels = c("StudyA", "StudyB")))))
head(HB, 3)
setwd("~/Documents/TFM/GitHub/HB_PublicData")
library(readr)
HB <- as.data.frame(read_csv("1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/NT.csv", col_types = cols(Study = col_factor(levels = c("StudyA", "StudyB")))))
head(HB, 3)
## block with some startup/background objects functions
library(umap)
plot.HB = function(x, labels,
main="A UMAP visualization of the HB datasets",
colors=c("#ff7f00", "#17becf"),
pad=0.1, cex=0.6, pch=19, add=FALSE, legend.suffix="",
cex.main=1, cex.legend=0.85) {
layout = x
if (is(x, "umap")) {
layout = x$layout
}
xylim = range(layout)
xylim = xylim + ((xylim[2]-xylim[1])*pad)*c(-0.5, 0.5)
if (!add) {
par(mar=c(0.2,0.7,1.2,0.7), ps=10)
plot(xylim, xylim, type="n", axes=F, frame=F)
rect(xylim[1], xylim[1], xylim[2], xylim[2], border="#aaaaaa", lwd=0.25)
}
points(layout[,1], layout[,2], col=colors[as.integer(labels)],
cex=cex, pch=pch)
mtext(side=3, main, cex=cex.main)
labels.u = unique(labels)
legend.pos = "topleft"
legend.text = as.character(labels.u)
if (add) {
legend.pos = "bottomleft"
legend.text = paste(as.character(labels.u), legend.suffix)
}
legend(legend.pos, legend=legend.text, inset=0.03,
col=colors[as.integer(labels.u)],
bty="n", pch=pch, cex=cex.legend)
}
set.seed(123456)
setwd("~/Documents/TFM/GitHub/HB_PublicData")
library(readr)
HB <- as.data.frame(read_csv("1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/NT.csv", col_types = cols(Study = col_factor(levels = c("StudyA", "StudyB")))))
head(HB, 3)
setwd("~/Documents/TFM/GitHub/HB_PublicData")
library(readr)
HB <- as.data.frame(read_csv("1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/NT.csv", col_types = cols(Study = col_factor(levels = c("Study A", "Study B")))))
head(HB, 3)
setwd("~/Documents/TFM/GitHub/HB_PublicData")
library(readr)
HB <- as.data.frame(read_csv("1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/NT.csv", col_types = cols(Study = col_factor(levels = c("Study A", "Study B")))))
head(HB, 3)
## block with some startup/background objects functions
library(umap)
plot.HB = function(x, labels,
main="A UMAP visualization of the HB datasets",
colors=c("#ff7f00", "#17becf"),
pad=0.1, cex=0.6, pch=19, add=FALSE, legend.suffix="",
cex.main=1, cex.legend=0.85) {
layout = x
if (is(x, "umap")) {
layout = x$layout
}
xylim = range(layout)
xylim = xylim + ((xylim[2]-xylim[1])*pad)*c(-0.5, 0.5)
if (!add) {
par(mar=c(0.2,0.7,1.2,0.7), ps=10)
plot(xylim, xylim, type="n", axes=F, frame=F)
rect(xylim[1], xylim[1], xylim[2], xylim[2], border="#aaaaaa", lwd=0.25)
}
points(layout[,1], layout[,2], col=colors[as.integer(labels)],
cex=cex, pch=pch)
mtext(side=3, main, cex=cex.main)
labels.u = unique(labels)
legend.pos = "topleft"
legend.text = as.character(labels.u)
if (add) {
legend.pos = "bottomleft"
legend.text = paste(as.character(labels.u), legend.suffix)
}
legend(legend.pos, legend=legend.text, inset=0.03,
col=colors[as.integer(labels.u)],
bty="n", pch=pch, cex=cex.legend)
}
set.seed(123456)
setwd("~/Documents/TFM/GitHub/HB_PublicData")
library(readr)
HB <- as.data.frame(read_csv("1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/NT.csv", col_types = cols(Study = col_factor(levels = c("Study A", "Study B")))))
head(HB, 3)
HB.data = HB[, grep("GSE104766|GSE133039", colnames(HB))]
HB.labels = HB[, "Tissue"]
setwd("~/Documents/TFM/GitHub/HB_PublicData")
library(readr)
HB <- as.data.frame(read_csv("1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/NT.csv", col_types = cols(Study = col_factor(levels = c("Study A", "Study B")))))
head(HB, 3)
HB.data = HB[, grep("Expression", colnames(HB))]
HB.labels = HB[, "Study"]
library(umap)
HB.umap = umap(HB.data)
HB.data = as.matrix(HB[, grep("Expression", colnames(HB))])
HB.labels = HB[, "Study"]
library(umap)
HB.umap = umap(HB.data)
HB.umap
head(HB.umap$layout, 3)
head(HB.umap$layout, 3)
plot.HB(HB.umap, HB.labels)
## block with some startup/background objects functions
library(umap)
plot.HB = function(x, labels,
main="A UMAP visualization of the HB datasets",
colors=c("#ff7f00", "#17becf"),
pad=0.1, cex=0.6, pch=19, add=FALSE, legend.suffix="",
cex.main=1, cex.legend=0.85) {
layout = x
if (is(x, "umap")) {
layout = x$layout
}
xylim = range(layout)
xylim = xylim + ((xylim[2]-xylim[1])*pad)*c(-1, 1)
if (!add) {
par(mar=c(0.2,0.7,1.2,0.7), ps=10)
plot(xylim, xylim, type="n", axes=F, frame=F)
rect(xylim[1], xylim[1], xylim[2], xylim[2], border="#aaaaaa", lwd=0.25)
}
points(layout[,1], layout[,2], col=colors[as.integer(labels)],
cex=cex, pch=pch)
mtext(side=3, main, cex=cex.main)
labels.u = unique(labels)
legend.pos = "topleft"
legend.text = as.character(labels.u)
if (add) {
legend.pos = "bottomleft"
legend.text = paste(as.character(labels.u), legend.suffix)
}
legend(legend.pos, legend=legend.text, inset=0.03,
col=colors[as.integer(labels.u)],
bty="n", pch=pch, cex=cex.legend)
}
set.seed(123456)
plot.HB(HB.umap, HB.labels)
## block with some startup/background objects functions
library(umap)
plot.HB = function(x, labels,
main="A UMAP visualization of the HB datasets",
colors=c("#ff7f00", "#17becf"),
pad=0.1, cex=0.6, pch=5, add=FALSE, legend.suffix="",
cex.main=1, cex.legend=0.85) {
layout = x
if (is(x, "umap")) {
layout = x$layout
}
xylim = range(layout)
xylim = xylim + ((xylim[2]-xylim[1])*pad)*c(-0.5, 0.5)
if (!add) {
par(mar=c(0.2,0.7,1.2,0.7), ps=10)
plot(xylim, xylim, type="n", axes=F, frame=F)
rect(xylim[1], xylim[1], xylim[2], xylim[2], border="#aaaaaa", lwd=0.25)
}
points(layout[,1], layout[,2], col=colors[as.integer(labels)],
cex=cex, pch=pch)
mtext(side=3, main, cex=cex.main)
labels.u = unique(labels)
legend.pos = "topleft"
legend.text = as.character(labels.u)
if (add) {
legend.pos = "bottomleft"
legend.text = paste(as.character(labels.u), legend.suffix)
}
legend(legend.pos, legend=legend.text, inset=0.03,
col=colors[as.integer(labels.u)],
bty="n", pch=pch, cex=cex.legend)
}
set.seed(123456)
plot.HB(HB.umap, HB.labels)
## block with some startup/background objects functions
library(umap)
plot.HB = function(x, labels,
main="A UMAP visualization of the HB datasets",
colors=c("#ff7f00", "#17becf"),
pad=0.1, cex=0.2, pch=19, add=FALSE, legend.suffix="",
cex.main=1, cex.legend=0.85) {
layout = x
if (is(x, "umap")) {
layout = x$layout
}
xylim = range(layout)
xylim = xylim + ((xylim[2]-xylim[1])*pad)*c(-0.5, 0.5)
if (!add) {
par(mar=c(0.2,0.7,1.2,0.7), ps=10)
plot(xylim, xylim, type="n", axes=F, frame=F)
rect(xylim[1], xylim[1], xylim[2], xylim[2], border="#aaaaaa", lwd=0.25)
}
points(layout[,1], layout[,2], col=colors[as.integer(labels)],
cex=cex, pch=pch)
mtext(side=3, main, cex=cex.main)
labels.u = unique(labels)
legend.pos = "topleft"
legend.text = as.character(labels.u)
if (add) {
legend.pos = "bottomleft"
legend.text = paste(as.character(labels.u), legend.suffix)
}
legend(legend.pos, legend=legend.text, inset=0.03,
col=colors[as.integer(labels.u)],
bty="n", pch=pch, cex=cex.legend)
}
set.seed(123456)
plot.HB(HB.umap, HB.labels)
## block with some startup/background objects functions
library(umap)
plot.HB = function(x, labels,
main="A UMAP visualization of the HB datasets",
colors=c("#ff7f00", "#17becf"),
pad=0.1, cex=0.6, pch=19, add=FALSE, legend.suffix="",
cex.main=1, cex.legend=0.85) {
layout = x
if (is(x, "umap")) {
layout = x$layout
}
xylim = range(layout)
xylim = xylim + ((xylim[2]-xylim[1])*pad)*c(-0.5, 0.5)
if (!add) {
par(mar=c(0.2,0.7,1.2,0.7), ps=10)
plot(xylim, xylim, type="n", axes=F, frame=F)
rect(xylim[1], xylim[1], xylim[2], xylim[2], border="#aaaaaa", lwd=0.25)
}
points(layout[,1], layout[,2], col=colors[as.integer(labels)],
cex=cex, pch=pch)
mtext(side=3, main, cex=cex.main)
labels.u = unique(labels)
legend.pos = "topleft"
legend.text = as.character(labels.u)
if (add) {
legend.pos = "bottomleft"
legend.text = paste(as.character(labels.u), legend.suffix)
}
legend(legend.pos, legend=legend.text, inset=0.03,
col=colors[as.integer(labels.u)],
bty="n", pch=pch, cex=cex.legend)
}
set.seed(123456)
plot.HB(HB.umap, HB.labels)
setwd("~/Documents/TFM/GitHub/HB_PublicData")
library(readr)
HB <- as.data.frame(read_csv("1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/T.csv", col_types = cols(Study = col_factor(levels = c("Study A", "Study B")))))
setwd("~/Documents/TFM/GitHub/HB_PublicData")
library(readr)
HB <- as.data.frame(read_csv("1-Obtaining-DEGs-for-HB/Batch_Effect_Analysis/GREIN_Normalization_Comparison/T.csv", col_types = cols(Study = col_factor(levels = c("Study A", "Study B")))))
head(HB, 3)
HB.data = as.matrix(HB[, grep("Expression", colnames(HB))])
HB.labels = HB[, "Study"]
library(umap)
HB.umap = umap(HB.data)
HB.umap
head(HB.umap$layout, 3)
plot.HB(HB.umap, HB.labels)
## block with some startup/background objects functions
library(umap)
plot.HB = function(x, labels,
main="A UMAP visualization of the HB datasets",
colors=c("#ff7f00", "#17becf"),
pad=0.1, cex=0.6, pch=19, add=FALSE, legend.suffix="",
cex.main=1, cex.legend=0.85) {
layout = x
if (is(x, "umap")) {
layout = x$layout
}
xylim = range(layout)
xylim = xylim + ((xylim[2]-xylim[1])*pad)*c(-0.5, 0.5)
if (!add) {
par(mar=c(0.2,0.7,1.2,0.7), ps=10)
plot(xylim, xylim, type="n", axes=F, frame=F)
rect(xylim[1], xylim[1], xylim[2], xylim[2], border="#aaaaaa", lwd=0.25)
}
points(layout[,1], layout[,2], col=colors[as.integer(labels)],
cex=cex, pch=pch)
mtext(side=3, main, cex=cex.main)
labels.u = unique(labels)
legend.pos = "topleft"
legend.text = as.character(labels.u)
if (add) {
legend.pos = "bottomleft"
legend.text = paste(as.character(labels.u), legend.suffix)
}
legend(legend.pos, legend=legend.text, inset=0.03,
col=colors[as.integer(labels.u)],
bty="n", pch=pch, cex=cex.legend)
}
set.seed(123456)
plot.HB(HB.umap, HB.labels)
