write.GSEA.exprs(eset_all_norm, file.path(resultsPath, "eset_all_norm_mean.gct"))
write.GSEA.exprs(eset_all_norm, file.path(resultsPath, "eset_all_norm_mean_nolog2.gct"))
## directories and paths
projectPath <- file.path("/home/diegommcc/Documentos/proyectos_master/proyectos_transcriptomica/Trabajo_Transcriptomica")
analysisDir <- "microarray.Analysis"
analysisPath <- file.path(projectPath, analysisDir)
outputDir <- "FirstTest"
outputPath <- file.path(analysisPath, outputDir)
dataPath <- file.path(projectPath, "data")
prefix <- "FirstTest"
setwd(analysisPath)
knitr::opts_chunk$set( warning = FALSE, echo = TRUE)
eset_all_RMA <- expresso(raw_data,
bg.correct = TRUE,
bgcorrect.method = "rma",
normalize = FALSE,
pmcorrect.method = "pmonly",
summary.method = "medianpolish",
verbose = TRUE)
meanDMSO <- rowMeans(exprs(eset_all_RMA)[, targets$Class == "DMSO"])
eset_all_RMA_Mean <- exprs(eset_all_RMA / meanDMSO)
View(eset_all)
View(exprseset_all)
meanDMSO <- rowMeans(exprs(eset_all_RMA)[, targets$Class == "DMSO"])
eset_all_RMA_Mean <- exprs(eset_all_RMA)/ meanDMSO
write.GSEA.exprs(eset_all_RMA_Mean, file.path(resultsPath, "eset_all_norm.gct"))
write.GSEA.exprs(eset_all_RMA_Mean, file.path(resultsPath, "eset_all_norm_nolog2.gct"))
knitr::opts_chunk$set( warning = FALSE, echo = TRUE)
packages <- c("dplyr","RColorBrewer","pheatmap","affy","limma","genefilter","annotate","hgu133plus2.db","BiocStyle","prettydoc","ggplot2","GOplot","DT","BiocGenerics","DESeq2","stats","Biobase","AnnotationDbi","ArrayTools")
sapply(packages, require, character.only = TRUE)
# set up working directory
assignmentPath <- file.path("~/microarray-data-analysis/Project")
setwd(assignmentPath)
# create and assign directory folders and paths
dir.create("Data")
dataPath <- file.path(assignmentPath, "Data")
dir.create("Results")
resultsPath <- file.path(assignmentPath, "Results")
dir.create("Figures")
figuresPath <- file.path(assignmentPath, "Figures")
targets <- readTargets(file="targets.txt", path=dataPath, row.names="FileName")
# temporary move to cel files path
setwd(dataPath)
raw_data <- ReadAffy(filenames=targets$FileName)
setwd(assignmentPath)
eset_all <- expresso(raw_data,
bg.correct = TRUE,
bgcorrect.method="rma",
normalize = TRUE,
normalize.method="quantiles",
pmcorrect.method="pmonly",
summary.method="medianpolish",
verbose = TRUE)
# Graph specifications
cols <- list(colorFill = c("light steel blue", "peach puff"),
heatmap9 = brewer.pal(9, "Blues"))
par(mfrow = c(1, 2), mar = c(7.5, 4.1, 1.4, 1.4))
boxplot(raw_data,
col = cols$colorFill[as.factor(targets$CellLine)],
las = 2,
main = "Boxplots without normalization",
ylab = "Gene expression")
mtext("A", side = 2, adj=2, las=1, padj = -9, font = 2)
legend("topright", legend = levels(as.factor(targets$CellLine)),
fill = cols$colorFill, cex = 0.8, bg = "white")
hist(raw_data,
lty = rep(1, nrow(targets)),
col = cols$colorFill[as.factor(targets$CellLine)],
xlab = "Intensity",
ylab = "Density",
main = "Intensities without normalization")
mtext("B", side = 2, adj=2, las=1, padj = -9, font = 2)
png(file.path(figuresPath, "IntensitiesBefore_All.png"), res = 150, width = 12, height = 5, units = 'in')
par(mfrow = c(1, 2), mar = c(7.5, 4.1, 1.4, 1.4))
boxplot(raw_data,
col = cols$colorFill[as.factor(targets$CellLine)],
las = 2,
main = "Boxplots without normalization",
ylab = "Gene expression")
mtext("A", side = 2, adj=2, las=1, padj = -13, font = 2)
legend("topright", legend = levels(as.factor(targets$CellLine)),
fill = cols$colorFill, cex = 0.8, bg = "white")
hist(raw_data,
lty = rep(1, nrow(targets)),
col = cols$colorFill[as.factor(targets$CellLine)],
xlab = "Intensity",
ylab = "Density",
main = "Intensities without normalization")
mtext("B", side = 2, adj=2, las=1, padj = -13, font = 2)
par(mfrow = c(1, 2), mar = c(7.5, 4.1, 1.4, 1.4))
exprseset_all <- as.data.frame(exprs(eset_all))
boxplot(exprseset_all,
col = cols$colorFill[as.factor(targets$CellLine)],
las = 2,
main = "Boxplots with normalization")
mtext("A", side = 2, adj = 2, las = 1, padj = -9, font = 2)
legend("topright", legend = levels(as.factor(targets$CellLine)),
fill = cols$colorFill, cex = 0.8, bg = "white")
plotDensities(exprseset_all,
legend = FALSE,
col = cols$colorFill[as.factor(targets$CellLine)])
title("Intensities with normalization")
legend("topright",
legend = levels(as.factor(targets$CellLine)),
lty = rep(1, nrow(targets)),
col = cols$colorFill)
mtext("B", side = 2, adj = 2, las = 1, padj = -9, font = 2)
png(file.path(figuresPath, "IntensitiesAfter_All.png"), res = 150, width = 12, height = 5, units = 'in')
par(mfrow = c(1, 2), mar = c(7.5, 4.1, 1.4, 1.4))
exprseset_all <- as.data.frame(exprs(eset_all))
boxplot(exprseset_all,
col = cols$colorFill[as.factor(targets$CellLine)],
las = 2,
main = "Boxplots with normalization")
mtext("A", side = 2, adj = 2, las = 1, padj = -13, font = 2)
legend("topright", legend = levels(as.factor(targets$CellLine)),
fill = cols$colorFill, cex = 0.8, bg = "white")
plotDensities(exprseset_all,
legend = FALSE,
col = cols$colorFill[as.factor(targets$CellLine)])
title("Intensities with normalization")
legend("topright",
legend = levels(as.factor(targets$CellLine)),
lty = rep(1, nrow(targets)),
col = cols$colorFill)
mtext("B", side = 2, adj = 2, las = 1, padj = -13, font = 2)
dists <- dist(t(exprs(eset_all)))
pheatmap(as.matrix(dists),
clustering_distance_rows = dists,
clustering_distance_cols = dists,
main = "Heatmap - Distance Matrix",
color = cols$heatmap9,
annotation_col = targets[, "CellLine", drop = FALSE],
annotation_row = targets[, "CellLine", drop = FALSE],
cellwidth = 22)
png(file.path(figuresPath, "DistanceMatrix_All.png"), res = 150, width = 8, height = 5, units = 'in')
pheatmap(as.matrix(dists),
clustering_distance_rows = dists,
clustering_distance_cols = dists,
main = "Heatmap - Distance Matrix",
color = cols$heatmap9,
annotation_col = targets[, "CellLine", drop = FALSE],
annotation_row = targets[, "CellLine", drop = FALSE],
cellwidth = 22)
# Data filtering using Interquartile range
eset_allIQR <- varFilter(eset_all, var.func=IQR, var.cutoff=0.5, filterByQuantile=TRUE)
# Design matrix
cond <- as.factor(targets$Class)
design <- model.matrix(~0 + cond)
# Contrasts matrix
cont_matrix <- makeContrasts(DMSOvsSAHM1 = condDMSO-condSAHM1, levels = design)
# Obtaining differentially expressed genes (DEGs)
## Linear model and eBayes
lmfit <- lmFit(eset_allIQR, design)
lmfit_cont <- contrasts.fit(lmfit, cont_matrix)
lmfit_cont_ebayes <- eBayes(lmfit_cont)
## Results
table_all <-topTable(lmfit_cont_ebayes, number=dim(exprs(eset_allIQR))[1], adjust.method="BH", sort.by="p")
## Filter DEGs
toptable_all <- table_all[which(table_all$adj.P.Val < 0.05) ,]
# DEGs' annotation with the gene symbol
names_all <- as.character(mget(as.character(rownames(toptable_all)),
hgu133plus2SYMBOL))
toptable_all  <- cbind(toptable_all, GeneSYMBOL = names_all)
toptable_all  <- toptable_all[which(toptable_all$GeneSYMBOL != "NA") ,]
## View Results
toptable_all
data_KOPTK1 <- targets %>% filter(CellLine == "KOPT-K1")
rownames(data_KOPTK1) <- data_KOPTK1$FileName
eset_KOPTK1 <- expresso(raw_data[, targets$CellLine == "KOPT-K1"],
bg.correct = TRUE,
bgcorrect.method = "rma",
normalize = TRUE,
normalize.method = "quantiles",
pmcorrect.method = "pmonly",
summary.method = "medianpolish",
verbose = TRUE)
par(mfrow = c(2, 2), mar = c(7.5, 4.1, 1.4, 1.4))
boxplot(raw_data[, targets$CellLine == "KOPT-K1"],
col = cols$colorFill[as.factor(data_KOPTK1$Class)],
cex.axis = 0.84, las = 2, main = "Boxplots without normalization (KOPT-K1)",
cex.main = 0.99, ylab = "Gene expression")
mtext("A", side = 2, adj=2, las=1, padj = -10, font = 2)
legend("topright", legend = levels(as.factor(data_KOPTK1$Class)),
fill = cols$colorFill, cex = 0.8, bg = "white")
hist(raw_data,
lty = rep(1, nrow(targets)),
col = cols$colorFill[as.factor(data_KOPTK1$Class)],
xlab = "Intensity",
ylab = "Density",
main = "Intensities without normalization (KOPTK1)")
mtext("B", side = 2, adj=2, las=1, padj = -10, font = 2)
legend("topright",
legend = levels(as.factor(data_KOPTK1$Class)),
lty = rep(1, nrow(targets)),
col = cols$colorFill)
exprseset_KOPTK1 <- as.data.frame(exprs(eset_KOPTK1))
boxplot(exprseset_KOPTK1,
col = cols$colorFill[as.factor(data_KOPTK1$Class)],
main = "Boxplots with normalization (KOPT-K1)", cex.main = 0.99,
cex.axis = 0.84, las = 2)
mtext("C", side = 2, adj = 2, las = 1, padj = -10, font = 2)
legend("topright", legend = levels(as.factor(data_KOPTK1$Class)),
fill = cols$colorFill, cex = 0.8, bg = "white")
plotDensities(exprseset_KOPTK1,
legend = FALSE,
col = cols$colorFill[as.factor(data_KOPTK1$Class)])
title("Intensities with normalization (KOPTK1)")
legend("topright",
legend = levels(as.factor(data_KOPTK1$Class)),
lty = rep(1, nrow(targets)),
col = cols$colorFill)
mtext("D", side = 2, adj = 2, las = 1, padj = -10, font = 2)
png(file.path(figuresPath, "Intensities_KOPTK1.png"), res = 150, width = 12, height = 8, units = 'in')
par(mfrow = c(2, 2), mar = c(7.5, 4.1, 1.4, 1.4))
boxplot(raw_data[, targets$CellLine == "KOPT-K1"],
col = cols$colorFill[as.factor(data_KOPTK1$Class)],
cex.axis = 0.84, las = 2, main = "Boxplots without normalization (KOPT-K1)",
cex.main = 0.99, ylab = "Gene expression")
mtext("A", side = 2, adj=2, las=1, padj = -10, font = 2)
legend("topright", legend = levels(as.factor(data_KOPTK1$Class)),
fill = cols$colorFill, cex = 0.8, bg = "white")
hist(raw_data,
lty = rep(1, nrow(targets)),
col = cols$colorFill[as.factor(data_KOPTK1$Class)],
xlab = "Intensity",
ylab = "Density",
main = "Intensities without normalization (KOPTK1)")
mtext("B", side = 2, adj=2, las=1, padj = -10, font = 2)
legend("topright",
legend = levels(as.factor(data_KOPTK1$Class)),
lty = rep(1, nrow(targets)),
col = cols$colorFill)
exprseset_KOPTK1 <- as.data.frame(exprs(eset_KOPTK1))
boxplot(exprseset_KOPTK1,
col = cols$colorFill[as.factor(data_KOPTK1$Class)],
main = "Boxplots with normalization (KOPT-K1)", cex.main = 0.99,
cex.axis = 0.84, las = 2)
mtext("C", side = 2, adj = 2, las = 1, padj = -10, font = 2)
legend("topright", legend = levels(as.factor(data_KOPTK1$Class)),
fill = cols$colorFill, cex = 0.8, bg = "white")
plotDensities(exprseset_KOPTK1,
legend = FALSE,
col = cols$colorFill[as.factor(data_KOPTK1$Class)])
title("Intensities with normalization (KOPTK1)")
legend("topright",
legend = levels(as.factor(data_KOPTK1$Class)),
lty = rep(1, nrow(targets)),
col = cols$colorFill)
mtext("D", side = 2, adj = 2, las = 1, padj = -10, font = 2)
PCA_KOPTK1 <- prcomp(t(exprs(eset_KOPTK1)))
rownames(PCA_KOPTK1$x) <- c("DMSO_01", "DMSO_02", "DMSO_03", "SAMH1_01", "SAMH1_02", "SAMH1_03")
PCA_KOPTK1_perc <- round(100*PCA_KOPTK1$sdev^2/sum(PCA_KOPTK1$sdev^2),1)
pca_data_KOPTK1<- data.frame(type = rownames(PCA_KOPTK1$x), PC1 = PCA_KOPTK1$x[,1], PC2=PCA_KOPTK1$x[,2])
pca_KOPTK1 <- ggplot(pca_data_KOPTK1,aes(x=PC1, y=PC2, col=type))+
geom_point(size=5)+
geom_point(size=5)+
labs(x=paste0("PC1 (",PCA_KOPTK1_perc[1],")"), y=paste0("PC2 (",PCA_KOPTK1_perc[2],")")) +
ggtitle("PCA for KOPTK1 cell line") +
theme(plot.title = element_text(hjust = 0.5))
png(file.path(figuresPath, "PCA_KOPTK1.png"), res = 150, width = 6, height = 4.5, units = 'in')
pca_KOPTK1
# Data filtering using Interquartile range
eset_KOPTK1IQR <- varFilter(eset_KOPTK1, var.func=IQR, var.cutoff=0.5, filterByQuantile=TRUE)
# Design matrix
cond_KOPTK1 <- as.factor(data_KOPTK1$Class)
design_KOPTK1 <- model.matrix(~0 + cond_KOPTK1)
# Contrasts matrix
cont_matrix_KOPTK1 <- makeContrasts(DMSOvsSAHM1 = cond_KOPTK1DMSO-cond_KOPTK1SAHM1, levels = design_KOPTK1)
# Obtaining differentially expressed genes (DEGs)
## Linear model and eBayes
lmfit_KOPTK1 <- lmFit(eset_KOPTK1IQR, design_KOPTK1)
lmfit_cont_KOPTK1 <- contrasts.fit(lmfit_KOPTK1, cont_matrix_KOPTK1)
lmfit_cont_ebayes_KOPTK1 <- eBayes(lmfit_cont_KOPTK1)
## Results
table_KOPTK1 <-topTable(lmfit_cont_ebayes_KOPTK1, number=dim(exprs(eset_KOPTK1IQR))[1], adjust.method="BH", sort.by="p")
# DEGs' annotation with the gene symbol
names_KOPTK1 <- as.character(mget(as.character(rownames(table_KOPTK1)),hgu133plus2SYMBOL))
table_KOPTK1  <- cbind(table_KOPTK1, GeneSYMBOL = names_KOPTK1)
table_KOPTK1  <- table_KOPTK1[which(table_KOPTK1$GeneSYMBOL != "NA") ,]
## Filter DEGs
toptable_KOPTK1 <- table_KOPTK1[which(table_KOPTK1$adj.P.Val < 0.05) ,]
# View Results
DT::datatable(toptable_KOPTK1)
# Save Results
write.csv(toptable_KOPTK1, file=file.path(resultsPath, "toptable_KOPTK1.csv"))
print(paste("Number of DE probes:",
dim(toptable_KOPTK1)[1]))
dupliGenes <- duplicated(toptable_KOPTK1[, "GeneSYMBOL"])
print(paste("Number of unique DEGs:",
dim(toptable_KOPTK1[!dupliGenes, ])[1]))
toptable_KOPTK1_logfcprobes.2 <- subset(toptable_KOPTK1,
toptable_KOPTK1$logFC >= log2(2) |
toptable_KOPTK1$logFC <= -log2(2))
toptable_KOPTK1_logfcprobes.2 <- toptable_KOPTK1_logfcprobes.2[order(toptable_KOPTK1_logfcprobes.2$logFC, decreasing = FALSE), ]
dupliGenes <- duplicated(toptable_KOPTK1_logfcprobes.2[, "GeneSYMBOL"])
toptable_KOPTK1_logfcprobes_nodup.2 <- toptable_KOPTK1_logfcprobes.2[!dupliGenes, ]
toptable_KOPTK1_logfcprobes_nodup.2 <- toptable_KOPTK1_logfcprobes_nodup.2[!is.na(toptable_KOPTK1_logfcprobes_nodup.2$GeneSYMBOL),]
data_HPBALL <- targets %>% filter(CellLine == "HPB-ALL")
rownames(data_HPBALL) <- data_HPBALL$FileName
eset_HPBALL <- expresso(raw_data[, targets$CellLine == "HPB-ALL"],
bg.correct = TRUE,
bgcorrect.method = "rma",
normalize = TRUE,
normalize.method = "quantiles",
pmcorrect.method = "pmonly",
summary.method = "medianpolish",
verbose = TRUE)
par(mfrow = c(2, 2), mar = c(7.5, 4.1, 1.4, 1.4))
boxplot(raw_data[, targets$CellLine == "HPB-ALL"],
col = cols$colorFill[as.factor(data_HPBALL$Class)],
cex.axis = 0.84, las = 2, main = "Boxplots without normalization (HPBALL)",
cex.main = 0.99, ylab = "Gene expression")
mtext("A", side = 2, adj=2, las=1, padj = -10, font = 2)
legend("topright", legend = levels(as.factor(data_HPBALL$Class)),
fill = cols$colorFill, cex = 0.8, bg = "white")
hist(raw_data,
lty = rep(1, nrow(targets)),
col = cols$colorFill[as.factor(data_HPBALL$Class)],
xlab = "Intensity",
ylab = "Density",
main = "Intensities without normalization (HPBALL)")
mtext("B", side = 2, adj=2, las=1, padj = -10, font = 2)
legend("topright",
legend = levels(as.factor(data_HPBALL$Class)),
lty = rep(1, nrow(targets)),
col = cols$colorFill)
exprseset_HPBALL <- as.data.frame(exprs(eset_HPBALL))
boxplot(exprseset_HPBALL,
col = cols$colorFill[as.factor(data_HPBALL$Class)],
main = "Boxplots with normalization (HPBALL)", cex.main = 0.99,
cex.axis = 0.84, las = 2)
mtext("C", side = 2, adj = 2, las = 1, padj = -10, font = 2)
legend("topright", legend = levels(as.factor(data_HPBALL$Class)),
fill = cols$colorFill, cex = 0.8, bg = "white")
plotDensities(exprseset_HPBALL,
legend = FALSE,
col = cols$colorFill[as.factor(data_HPBALL$Class)])
title("Intensities with normalization (HPBALL)")
legend("topright",
legend = levels(as.factor(data_HPBALL$Class)),
lty = rep(1, nrow(targets)),
col = cols$colorFill)
mtext("D", side = 2, adj = 2, las = 1, padj = -10, font = 2)
png(file.path(figuresPath, "Intensities_HPB-ALL.png"), res = 150, width = 12, height = 8, units = 'in')
par(mfrow = c(2, 2), mar = c(7.5, 4.1, 1.4, 1.4))
boxplot(raw_data[, targets$CellLine == "HPB-ALL"],
col = cols$colorFill[as.factor(data_HPBALL$Class)],
cex.axis = 0.84, las = 2, main = "Boxplots without normalization (HPBALL)",
cex.main = 0.99, ylab = "Gene expression")
mtext("A", side = 2, adj=2, las=1, padj = -10, font = 2)
legend("topright", legend = levels(as.factor(data_HPBALL$Class)),
fill = cols$colorFill, cex = 0.8, bg = "white")
hist(raw_data,
lty = rep(1, nrow(targets)),
col = cols$colorFill[as.factor(data_HPBALL$Class)],
xlab = "Intensity",
ylab = "Density",
main = "Intensities without normalization (HPBALL)")
mtext("B", side = 2, adj=2, las=1, padj = -10, font = 2)
legend("topright",
legend = levels(as.factor(data_HPBALL$Class)),
lty = rep(1, nrow(targets)),
col = cols$colorFill)
exprseset_HPBALL <- as.data.frame(exprs(eset_HPBALL))
boxplot(exprseset_HPBALL,
col = cols$colorFill[as.factor(data_HPBALL$Class)],
main = "Boxplots with normalization (HPBALL)", cex.main = 0.99,
cex.axis = 0.84, las = 2)
mtext("C", side = 2, adj = 2, las = 1, padj = -10, font = 2)
legend("topright", legend = levels(as.factor(data_HPBALL$Class)),
fill = cols$colorFill, cex = 0.8, bg = "white")
plotDensities(exprseset_HPBALL,
legend = FALSE,
col = cols$colorFill[as.factor(data_HPBALL$Class)])
title("Intensities with normalization (HPBALL)")
legend("topright",
legend = levels(as.factor(data_HPBALL$Class)),
lty = rep(1, nrow(targets)),
col = cols$colorFill)
mtext("D", side = 2, adj = 2, las = 1, padj = -10, font = 2)
PCA_HPBALL <- prcomp(t(exprs(eset_HPBALL)))
rownames(PCA_HPBALL$x) <- c("DMSO_01", "DMSO_02", "DMSO_03", "SAMH1_01", "SAMH1_02", "SAMH1_03")
PCA_HPBALL_perc <- round(100*PCA_HPBALL$sdev^2/sum(PCA_HPBALL$sdev^2),1)
pca_data_HPBALL<- data.frame(type = rownames(PCA_HPBALL$x), PC1 = PCA_HPBALL$x[,1], PC2=PCA_HPBALL$x[,2])
pca_HPBALL <- ggplot(pca_data_HPBALL,aes(x=PC1, y=PC2, col=type))+
geom_point(size=5) +
labs(x=paste0("PC1 (",PCA_HPBALL_perc[1],")"), y=paste0("PC2 (",PCA_HPBALL_perc[2],")")) +
theme_minimal()+
ggtitle("PCA for HPBALL cell line") +
theme(plot.title = element_text(hjust = 0.5))
png(file.path(figuresPath, "PCA_HPBALL.png"), res = 150, width = 6, height = 4.5, units = 'in')
pca_HPBALL
# Data filtering using Interquartile range
eset_HPBALLIQR <- varFilter(eset_HPBALL, var.func=IQR, var.cutoff=0.5, filterByQuantile=TRUE)
# Design matrix
cond_HPBALL <- as.factor(data_HPBALL$Class)
design_HPBALL <- model.matrix(~0 + cond_HPBALL)
# Contrasts matrix
cont_matrix_HPBALL <- makeContrasts(DMSOvsSAHM1 = cond_HPBALLDMSO-cond_HPBALLSAHM1, levels = design_HPBALL)
# Obtaining differentially expressed genes (DEGs)
## Linear model and eBayes
lmfit_HPBALL <- lmFit(eset_HPBALLIQR, design_HPBALL)
lmfit_cont_HPBALL <- contrasts.fit(lmfit_HPBALL, cont_matrix_HPBALL)
lmfit_cont_ebayes_HPBALL <- eBayes(lmfit_cont_HPBALL)
## Results
table_HPBALL <-topTable(lmfit_cont_ebayes_HPBALL, number=dim(exprs(eset_HPBALLIQR))[1], adjust.method="BH", sort.by="p")
# DEGs' annotation with the gene symbol
names_HPBALL <- as.character(mget(as.character(rownames(table_HPBALL)),hgu133plus2SYMBOL))
table_HPBALL  <- cbind(table_HPBALL, GeneSYMBOL = names_HPBALL)
table_HPBALL  <- table_HPBALL[which(table_HPBALL$GeneSYMBOL != "NA") ,]
## Filter DEGs
toptable_HPBALL <- table_HPBALL[which(table_HPBALL$adj.P.Val < 0.05) ,]
# View Results
DT::datatable(toptable_HPBALL)
# Save Results
write.csv(toptable_HPBALL, file=file.path(resultsPath, "toptable_HPBALL.csv"))
print(paste("Number of DE probes:",
dim(toptable_HPBALL)[1]))
dupliGenes <- duplicated(toptable_HPBALL[, "GeneSYMBOL"])
print(paste("Number of unique DEGs:",
dim(toptable_HPBALL[!dupliGenes, ])[1]))
toptable_HPBALL_logfcprobes.2 <- subset(toptable_HPBALL,
toptable_HPBALL$logFC >= log2(2) |
toptable_HPBALL$logFC <= -log2(2))
toptable_KOPTK1_logfcprobes.2 <- toptable_HPBALL_logfcprobes.2[order(toptable_HPBALL_logfcprobes.2$logFC,  decreasing = FALSE), ]
dupliGenes <- duplicated(toptable_HPBALL_logfcprobes.2[, "GeneSYMBOL"])
toptable_HPBALL_logfcprobes_nodup.2 <- toptable_HPBALL_logfcprobes.2[!dupliGenes, ]
toptable_HPBALL_logfcprobes_nodup.2 <- toptable_HPBALL_logfcprobes_nodup.2[!is.na(toptable_HPBALL_logfcprobes_nodup.2$GeneSYMBOL),]
require(gridExtra)
volcano_KOPTK1 <- ggplot(data=table_KOPTK1, aes(x=logFC, y=-log10(P.Value))) +
geom_point(color='grey') +
theme_minimal() +
geom_vline(xintercept=c(-0.5, 0.5), col="red") +
geom_hline(yintercept=-log10(0.05), col="red") +
labs(tag = "A") +
ggtitle("Volcano plot of KOPTK1 DEG") +
theme(plot.title = element_text(hjust = 0.5))
volcano_HPBALL <- ggplot(data=table_HPBALL, aes(x=logFC, y=-log10(P.Value))) +
geom_point(color='grey') +
theme_minimal() +
geom_vline(xintercept=c(-0.5, 0.5), col="red") +
geom_hline(yintercept=-log10(0.05), col="red") +
labs(tag = "B") +
ggtitle("Volcano plot of HPB-ALL DEG") +
theme(plot.title = element_text(hjust = 0.5))
grid.arrange(volcano_KOPTK1, volcano_HPBALL, ncol=2)
png(file.path(figuresPath, "volcano.png"), res = 150, width = 12, height = 4, units = 'in')
grid.arrange(volcano_KOPTK1, volcano_HPBALL, ncol=2)
venn_data_HPBALL <- subset(toptable_HPBALL_logfcprobes_nodup.2, select = c("GeneSYMBOL", "logFC"))
venn_data_KOPTK1 <- subset(toptable_KOPTK1_logfcprobes_nodup.2, select = c("GeneSYMBOL", "logFC"))
GOVenn(venn_data_HPBALL, venn_data_KOPTK1, label= c("HPB-ALL", "KOPT-K1"),  plot = T)
png(file.path(figuresPath, "Venn.png"), res = 150, width = 12, height = 6, units = 'in')
GOVenn(venn_data_HPBALL, venn_data_KOPTK1, label= c("HPB-ALL", "KOPT-K1"),  plot = T)
# Function: obtain gct to GSEA
write.GSEA.exprs <- function(objExprss, filePath) {
if (is(objExprss, "ExpressionSet")) {
DF <- exprs(objExprss)
} else {
DF <- objExprss
}
dfExprss <- data.frame(NAME = rownames(DF),
DESCRIPTION = rep(NA, nrow(DF)),
DF)
# First two lines
cat("#1,2", file = filePath, sep = "\n")
cat(paste(nrow(DF), ncol(DF), sep = "\t"),
file = filePath, sep = "\n", append = TRUE)
# Matrix of exprs data
write.table(dfExprss, file = filePath, sep = "\t", append = TRUE,
row.names = FALSE, quote = FALSE)
}
eset_all_RMA <- expresso(raw_data,
bg.correct = TRUE,
bgcorrect.method = "rma",
normalize = FALSE,
pmcorrect.method = "pmonly",
summary.method = "medianpolish",
verbose = TRUE)
meanDMSO <- rowMeans(exprs(eset_all_RMA)[, targets$Class == "DMSO"])
eset_all_RMA_Mean <- exprs(eset_all_RMA)/ meanDMSO
write.GSEA.exprs(eset_all_RMA_Mean, file.path(resultsPath, "eset_all_norm.gct"))
write.GSEA.exprs(eset_all_RMA_Mean, file.path(resultsPath, "eset_all_norm_nolog2.gct"))
## function to cls
write.GSEA.cond <- function(objExprss, targets, filePath) {
if (is(objExprss, "ExpressionSet")) {
DF <- exprs(objExprss)
} else {
DF <- objExprss
}
cat(paste(ncol(DF), length(unique(targets$Class)), 1,
sep = "\t"), file = filePath, sep = "\n")
cat(paste("#", paste(unique(data_KOPTK1$Class), collapse = "\t"),
sep = "\t"), sep = "\n",
file = filePath, append = TRUE)
cat(paste(targets$Class, collapse = "\t"), file = filePath, sep = "\n",
append = TRUE)
}
# Obtain .cls
write.GSEA.cond(eset_all, targets, file.path(resultsPath,"eset_all.cls"))
# Spots names
spots_total <- rownames(eset_all)
spots_total_list.GeneSymbol <- as.list(mapIds(hgu133plus2.db, keys=spots_total, column="SYMBOL", keytype = "PROBEID"))
spots_total_char.GeneSymbol <- as.character(spots_total_list.GeneSymbol)
# Add names
chip_total.annotated<-cbind(spots_total, spots_total_char.GeneSymbol)
df_chip_total <- as.data.frame(chip_total.annotated)
df_chip_total$Gene_title <- NA
colnames(df_chip_total) <- c("Probe Set ID", "Gene Symbol", "Gene Title")
write.table(df_chip_total, file=file.path(resultsPath, "eset_all_norm.chip"), sep = "\t", quote = FALSE, row.names = FALSE)
sessionInfo()
reticulate::repl_python()
