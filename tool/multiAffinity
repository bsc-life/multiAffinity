#!/bin/bash
set -euo pipefail

# Defining default values for parameters
padj=0.05
LFC=1
multiXrank_r=0.5
multiXrank_selfloops=1
Molti_modularity=1
Molti_Louvain=0
communities_approach=false

# Usage function
usage(){
echo -e '\n'
echo "usage: multiAffinity [-h] [-c] -o OUTPUT_PATH  -d COUNTS_PATH -m METADATA_PATH -n NETWORK_PATH"
echo "                     [-a padj] [-b LFC] [-e multiXrank_r] [-g multiXrank_selfloops]"
echo "                     [-i Molti_modularity] [-j Molti_Louvain]"
echo -e '\n'
echo "arguments:"
echo "    -h                          show this help message and exit"
echo "    -c                          optional - use communities distribution to compute affinity"
echo "    -o output_path              indicate output directory"
echo "    -d counts_path              path to counts matrix, single or multiple (-c counts_path1,counts_path2)"
echo "    -m metadata_path            path to metadata, single or multiple (-c metadata_path1,metadata_path2)"
echo "    -n network_path             path to network, single or multiple (-c network_path1,network_path2)"
echo "    -a padj                     optional - default value is 0.05"
echo "    -b LFC                      optional - default value is 1"
echo "    -e multiXrank_r             optional - default value is 0.5"
echo "    -f multiXrank_selfloops     optional - default value is 1"
echo "    -g Molti_modularity         optional - default value is 1"
echo "    -i Molti_Louvain            optional - default value is 0"
echo " "
exit 0
} 
                
# Classifying input arguments
while getopts ":h:co:m:n:a:b:d:e:f:g:i:" opt; do
  case $opt in
    h) usage                             ;;
    c) communities_approach=true         ;;
    o) output_dir=($OPTARG)              ;;
    d) set -f
       IFS=','
       counts=($OPTARG)                  ;;
    m) set -f
       IFS=','
       metadata=($OPTARG)                ;;
    n) set -f
       IFS=','
       network=($OPTARG)                 ;;
    a) padj=($OPTARG)                    ;;
    b) LFC=($OPTARG)                     ;;
    e) multiXrank_r=($OPTARG)            ;;
    f) multiXrank_selfloops=($OPTARG)    ;;
    g) Molti_modularity=($OPTARG)        ;;
    i) Molti_Louvain=($OPTARG)           ;;
  esac
done

# Create tmp directory
TMPFILE=`mktemp -d /tmp/tempdir.XXXXXXXXXX` || exit 1

# Checking for mandatory arguments
if [ -z ${output_dir+x} ]; then echo "-o is obligatory"; exit 1; fi
if [ -z ${counts+x} ]; then echo "-d is obligatory"; exit 1; fi
if [ -z ${metadata+x} ]; then echo "-m is obligatory"; exit 1; fi
if [ -z ${network+x} ]; then echo "-n is obligatory"; exit 1; fi

# Curating the inputs
mkdir -p $TMPFILE/input; mkdir -p $TMPFILE/input/layers; mkdir -p $TMPFILE/input/data; mkdir -p $TMPFILE/input/data/counts; mkdir -p $TMPFILE/input/data/metadata; cp -avr bin/ $TMPFILE >& /dev/null

for i in "${counts[@]}"; do if grep -q "," ${i}; then cp ${i} $TMPFILE/input/data/counts; else echo "Check that the counts file/s exists, and use ',' as a separator"; exit 1; fi; done
for i in "${metadata[@]}"; do if grep -q "," ${i}; then cp ${i} $TMPFILE/input/data/metadata; else echo "Check that the metadata file/s exists, and use ',' as a separator"; exit 1; fi; done
for i in "${network[@]}"; do if grep -q "," ${i}; then cp ${i} $TMPFILE/input/layers; else echo "Check that the network file/s exists, and use ',' as a separator"; exit 1; fi; done

pushd $TMPFILE >& /dev/null

echo 'STEP1 - Finding metaDEGs'
bash bin/metaDEGs/run_metaDEGs.sh $padj $LFC

echo 'STEP2 - Analysing DEGs in network communities'
bash bin/Communities/run_Communities.sh $Molti_modularity $Molti_Louvain 

echo 'STEP3 - Perform affinity study'
bash bin/Affinity/run_Affinity.sh $multiXrank_r $multiXrank_selfloops $communities_approach

echo 'STEP4 - Defining final output'
python bin/join_output.py

popd >& /dev/null
mv $TMPFILE/output ./$output_dir; rm -rf $TMPFILE

echo 'multiAffinity completed. Check out the output folder'