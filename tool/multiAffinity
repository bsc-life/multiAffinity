#!/bin/bash
set -euo pipefail

# Defining default values for parameters
DESeq2_padj=0.05
DESeq2_LFC=1
RRA_Score=0.05
waddR_pval=0.001
waddR_permnum=100
multiXrank_r=0.5
multiXrank_selfloops=1
Molti_modularity=1
Molti_Louvain=0

# Usage function
usage(){
echo -e '\n'
echo "usage: multiAffinity [-h] -c COUNTS_PATH -m METADATA_PATH -n NETWORK_PATH"
echo "                     [-a DESeq2_padj] [-b DESeq2_LFC] [-d RRA_Score]"
echo "                     [-e waddR_pval] [-f waddR_permnum] [-g multiXrank_r]"
echo "                     [-h multiXrank_selfloops] [-i Molti_modularity] [-j Molti_Louvain]"
echo -e '\n'
echo "arguments:"
echo "    -h                          show this help message and exit"
echo "    -c COUNTS_PATH              path to counts matrix, single or multiple (-c COUNTS_PATH1,COUNTS_PATH2)"
echo "    -m METADATA_PATH            path to metadata, single or multiple (-c METADATA_PATH1,METADATA_PATH2)"
echo "    -n NETWORK_PATH             path to network, single or multiple (-c NETWORK_PATH1,NETWORK_PATH2)"
echo "    -a DESeq2_padj              optional - default value is 0.05"
echo "    -b DESeq2_LFC               optional - default value is 1"
echo "    -d RRA_Score                optional - default value is 0.05"
echo "    -e waddR_pval               optional - default value is 0.001"
echo "    -f waddR_permnum            optional - default value is 100"
echo "    -g multiXrank_r             optional - default value is 0.5"
echo "    -h multiXrank_selfloops     optional - default value is 1"
echo "    -i Molti_modularity         optional - default value is 1"
echo "    -j Molti_Louvain            optional - default value is 0"
echo " "
exit 0
} 
                
# Classifying input arguments
while getopts ":hc:m:n:a:b:d:e:f:g:h:i:j:k:" opt; do
  case $opt in
    h) usage                             ;;
    c) set -f
       IFS=','
       counts=($OPTARG)                  ;;
    m) set -f
       IFS=','
       metadata=($OPTARG)                ;;
    n) set -f
       IFS=','
       network=($OPTARG)                 ;;
    a) DESeq2_padj=($OPTARG)             ;;
    b) DESeq2_LFC=($OPTARG)              ;;
    d) RRA_Score=($OPTARG)               ;;
    e) waddR_pval=($OPTARG)        ;;
    f) waddR_permnum=($OPTARG)           ;;
    g) multiXrank_r=($OPTARG)            ;;
    h) multiXrank_selfloops=($OPTARG)    ;;
    i) Molti_modularity=($OPTARG)        ;;
    j) Molti_Louvain=($OPTARG)           ;;
  esac
done

# Defining mandatory arguments
if [ -z ${counts+x} ]; then echo "-c is obligatory"; exit 1; fi
if [ -z ${metadata+x} ]; then echo "-m is obligatory"; exit 1; fi
if [ -z ${network+x} ]; then echo "-n is obligatory"; exit 1; fi

# Creating input directories and organizing data
mkdir -p input; mkdir -p input/layers; mkdir -p input/data; mkdir -p input/data/counts; mkdir -p input/data/metadata
for i in "${counts[@]}"; do cp ${i} input/data/counts; done
for i in "${metadata[@]}"; do cp ${i} input/data/metadata; done
for i in "${network[@]}"; do cp ${i} input/layers; done

echo $DESeq2_padj $DESeq2_LFC $RRA_Score $waddR_pval $waddR_permnum
ls
echo 'STEP1 - Finding metaDEGs'
bash bin/metaDEGs/run_metaDEGs.sh $DESeq2_padj $DESeq2_LFC $RRA_Score $waddR_pval $waddR_permnum

echo 'STEP2 - Perform affinity study'
bash bin/Affinity/run_Affinity.sh $multiXrank_r $multiXrank_selfloops

echo 'STEP3 - Analysing DEGs in network communities'
bash bin/Communities/run_Communities.sh $Molti_modularity $Molti_Louvain

echo 'STEP4 - Defining final output'
mv output/metaDEGs/metaDEGs/degs_report.txt output/metaDEGs/; mv output/metaDEGs/metaDEGs/metaDEGs.txt output/metaDEGs/; rm -r -f output/metaDEGs/normalized_counts; rm -r -f mv output/metaDEGs/metaDEGs/; rm -f output/Affinity/dRWR_matrix.txt
python bin/join_output.py
shopt -s extglob
rm -v !("bin"|"output"|"multiAffinity") >& /dev/null
shopt -u extglob
echo 'multiAffinity completed. Check out the output folder'