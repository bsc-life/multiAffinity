#!/bin/bash
set -euo pipefail

# Defining default values for parameters
padj=0.05
LFC=1
control_id=Normal
multiXrank_r=0.15
multiXrank_selfloops=1
Molti_modularity=8
Molti_Louvain=5
approach=local

# Usage function
usage(){
echo -e '\n'
echo "usage: multiAffinity [-h] [-a Approach] -o Output Path  -c Counts Path -m Metadata Path"
echo "                     -n Network Path [-b Adjusted p-value] [-d DESeq2 - LFC cutoff]"
echo "                     [-e Control ID] [-f multiXrank - R value] [-g multiXrank - Selfloops]"
echo "                     [-i MolTI-DREAM - Modularity] [-j MolTI-DREAM - Louvain]"
echo -e '\n'
echo "arguments:"
echo "  -h                          show this help message and exit"
echo "  -a Approach                 computes correlation on each community or respect all genes, local or global approach (default is local)[opt]"
echo "  -o Output Path              defines name for output directory"
echo "  -c Counts Path              path to counts matrix, use sep ','"
echo "  -m Metadata Path            path to metadata, use sep ','"
echo "  -n Network Path             path to network, use sep ','"
echo "  -b Adjusted p-value         sets significance value for DESeq2, RRA, and Spearman's Corr (default is 0.05)[opt]"
echo "  -d DESeq2 - LFC cutoff      defines whether self loops are removed or not, takes values 0 or 1 (default is 1) [opt]"
echo "  -e Control ID               defines metadata label for the control samples (default is Normal) [opt]"
echo "  -f multiXrank - R value     global restart probability for multiXrank, given by float between 0 and 1 (default is 0.15) [opt]"
echo "  -g multiXrank - Selfloops   defines whether self loops are removed or not, takes values 0 or 1 (default is 1) [opt]"
echo "  -i MolTI-DREAM - Modularity sets Newman modularity resolution parameter on molTI-DREAM (default is 1) [opt]"
echo "  -j MolTI-DREAM - Louvain    switches to randomized Louvain on molTI-DREAM and sets num. of randomizations (default is 5) [opt]"
exit 0
} 
                
# Classifying input arguments
while getopts ":ha:o:c:m:n:b:d:e:f:g:i:j:" opt; do
  case $opt in
    h) usage                             ;;
    a) approach=($OPTARG)                ;;
    o) output_dir=($OPTARG)              ;;
    c) set -f
       IFS=','
       counts=($OPTARG)                  ;;
    m) set -f
       IFS=','
       metadata=($OPTARG)                ;;
    n) set -f
       IFS=','
       network=($OPTARG)                 ;;
    b) padj=($OPTARG)                    ;;
    d) LFC=($OPTARG)                     ;;
    e) control_id=($OPTARG)                     ;;
    f) multiXrank_r=($OPTARG)            ;;
    g) multiXrank_selfloops=($OPTARG)    ;;
    i) Molti_modularity=($OPTARG)        ;;
    j) Molti_Louvain=($OPTARG)           ;;
  esac
done

# Create tmp directory
WORKDIR=$(pwd) ; TMPFILE=`mktemp -d /tmp/tempdir.XXXXXXXXXX` || exit 1

if [[ "$WORKDIR" =~ tool ]]; then
  mkdir -p $TMPFILE/tool
  cp -r bin/ $TMPFILE/tool/; else
  mkdir -p $TMPFILE/tool/bin
  cp -r /tool $TMPFILE/; fi

# Checking for mandatory arguments
if [ -z ${output_dir+x} ]; then echo "-o is obligatory"; exit 1; fi
if [ -z ${counts+x} ]; then echo "-c is obligatory"; exit 1; fi
if [ -z ${metadata+x} ]; then echo "-m is obligatory"; exit 1; fi
if [ -z ${network+x} ]; then echo "-n is obligatory"; exit 1; fi

# Check approach
if [ $approach = "local" ] || [ $approach = "global" ]; then : ; else echo "Define approach input as local or global"; exit 1; fi

# Curating the inputs
mkdir -p $TMPFILE/tool/input; mkdir -p $TMPFILE/tool/input/layers; mkdir -p $TMPFILE/tool/input/data; mkdir -p $TMPFILE/tool/input/data/counts; mkdir -p $TMPFILE/tool/input/data/metadata

for i in "${counts[@]}"; do if grep -q "," ${i}; then cp ${i} $TMPFILE/tool/input/data/counts; else echo "Use ',' as a separator in the counts inputs"; exit 1; fi; done
for i in "${metadata[@]}"; do if grep -q "," ${i}; then cp ${i} $TMPFILE/tool/input/data/metadata; else echo "Use ',' as a separator in the metadata inputs"; exit 1; fi; done
for i in "${network[@]}"; do if grep -q "," ${i}; then cp ${i} $TMPFILE/tool/input/layers; else echo "Use ',' as a separator in the layers inputs"; exit 1; fi; done

pushd $TMPFILE >& /dev/null; cd tool/

echo 'STEP1 - Finding metaDEGs'
bash bin/metaDEGs/run_metaDEGs.sh $padj $LFC $control_id

echo 'STEP2 - Analysing DEGs in network communities'
bash bin/Communities/run_Communities.sh $Molti_modularity $Molti_Louvain 

echo 'STEP3 - Perform affinity study'
bash bin/Affinity/run_Affinity.sh $multiXrank_r $multiXrank_selfloops $padj $approach

echo 'STEP4 - Defining final output'
bash bin/Conclude/run_output.sh

popd >& /dev/null
mkdir -p $output_dir
cp -a $TMPFILE/tool/output/. ./$output_dir; rm -rf $TMPFILE

echo 'multiAffinity completed. Check out the output folder'