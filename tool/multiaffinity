#!/bin/bash
set -euo pipefail

printf '\n\n***************************************************************' 
printf '\n*********************** MULTIAFFINITY *************************' 
printf '\n***************************************************************\n' 

echo 'more information at github.com/marbatlle/multiAffinity'
echo -e '\n'

# Defining default values for parameters
padj=0.05
LFC=1
control_id=Normal
multiXrank_r=0.15
multiXrank_selfloops=1
Molti_modularity=8
Molti_Louvain=5
approach=local
min_nodes=7
output_dir=output

# Usage function
help(){
echo 'usage: multiaffinity [<files>] [<arguments>]'
echo ''
echo 'select the files of study:'
#echo "  -o Output Path                  defines name for output directory"
echo "  -c Counts Path                  path to counts matrix, use sep ','"
echo "  -m Metadata Path                path to metadata, use sep ','"
echo ''
echo 'the following optional arguments are available:'
echo "  -h help"
echo "  -n Network Path                 path to network, use sep ','"
echo "  -a Approach                     default is local"
echo "  -b Adjusted p-value             default is 0.05"
echo "  -d DESeq2 - LFC cutoff          default is 1"
echo "  -i MolTI-DREAM - Modularity     default is 1"
echo "  -j MolTI-DREAM - Louvain        default is 5"
echo "  -k Minimal community nodes      default is 7"
echo "  -f multiXrank - R value         default is 0.15"
echo "  -g multiXrank - Selfloops       default is 1"
echo -e '\n'
exit 0
} 
                
# Classifying input arguments
while getopts ":ha:o:c:m:n:b:d:e:f:g:i:j:k:" opt; do
  case $opt in
    h) help                              ;;
    a) approach=($OPTARG)                ;;
    o) output_dir=($OPTARG)              ;;
    c) set -f
       IFS=','
       counts=($OPTARG)                  ;;
    m) set -f
       IFS=','
       metadata=($OPTARG)                ;;
    n) set -f
       IFS=','
       network=($OPTARG)                 ;;
    b) padj=($OPTARG)                    ;;
    d) LFC=($OPTARG)                     ;;
    e) control_id=($OPTARG)              ;;
    f) multiXrank_r=($OPTARG)            ;;
    g) multiXrank_selfloops=($OPTARG)    ;;
    i) Molti_modularity=($OPTARG)        ;;
    j) Molti_Louvain=($OPTARG)           ;;
    k) min_nodes=($OPTARG)              ;;
  esac
done

# Check user parameters, if not value, default value is employed
## padj
dec='^[0-9]+([.][0-9]+)?$'
int='^[0-9]+$'
if ! [[ $padj =~ $dec ]]; then $padj = '0.05'; fi
## LFC
if ! [[ $LFC =~ $int ]]; then $LFC = '1'; fi
## multiXrank_r
if ! [[ $multiXrank_r =~ $dec ]]; then $multiXrank_r = '0.15'; fi
## multiXrank_selfloops
if [ $multiXrank_selfloops = "1" ] || [ $multiXrank_selfloops = "0" ]; then : ; else $multiXrank_selfloops = '1'; fi
## Molti_modularity
if ! [[ $Molti_modularity =~ $int ]]; then $Molti_modularity = '8'; fi
## Molti_Louvain
if ! [[ $Molti_Louvain =~ $int ]]; then $Molti_Louvain = '5'; fi
## min_nodes
if ! [[ $min_nodes =~ $int ]]; then $min_nodes = '7'; fi
## approach
if [ $approach = "local" ] || [ $approach = "global" ]; then : ; else $approach = "local"; fi

# Creating tmp directory
WORKDIR=$(pwd) ; TMPFILE=`mktemp -d /tmp/tempdir.XXXXXXXXXX` || exit 1

if [[ "$WORKDIR" =~ tool ]]; then
  mkdir -p $TMPFILE/tool
  cp -r bin/ $TMPFILE/tool/; else
  mkdir -p $TMPFILE/tool/bin
  cp -r /tool $TMPFILE/; fi

# Curating the inputs
mkdir -p $TMPFILE/tool/input; mkdir -p $TMPFILE/tool/input/layers; mkdir -p $TMPFILE/tool/input/data; mkdir -p $TMPFILE/tool/input/data/counts; mkdir -p $TMPFILE/tool/input/data/metadata
## Output directory
if [ -z ${output_dir+x} ]; then echo "-o is obligatory"; exit 1; fi
## Counts files
if [ -z ${counts+x} ]; then echo "-c is obligatory"; exit 1; fi
for i in "${counts[@]}"; do if grep -q "," ${i}; then cp ${i} $TMPFILE/tool/input/data/counts; else echo "Use ',' as a separator in the counts inputs"; exit 1; fi; done
## Metadata files
if [ -z ${metadata+x} ]; then echo "-m is obligatory"; exit 1; fi
for i in "${metadata[@]}"; do if grep -q "," ${i}; then cp ${i} $TMPFILE/tool/input/data/metadata; else echo "Use ',' as a separator in the metadata inputs"; exit 1; fi; done
## Network files
if [ -z ${network+x} ]; then 
  cp -a $TMPFILE/tool/bin/Communities/sample_network/. $TMPFILE/tool/input/layers/
else
  for i in "${network[@]}"; do if grep -q "," ${i}; then cp ${i} $TMPFILE/tool/input/layers; else echo "Use ',' as a separator in the layers inputs"; exit 1; fi; done;fi

pushd $TMPFILE >& /dev/null; cd tool/

printf 'STEP1 - Determining the metaDEGs           '      
bash bin/metaDEGs/run_metaDEGs.sh $padj $LFC $control_id

printf 'STEP2 - Uncovering the community structure '
bash bin/Communities/run_Communities.sh $Molti_modularity $Molti_Louvain 


printf 'STEP3 - Performing the affinity study      '
bash bin/Affinity/run_Affinity.sh $multiXrank_r $multiXrank_selfloops $padj $approach $min_nodes

printf 'STEP4 - Defining the final output          '
bash bin/Conclude/run_output.sh

# Curating the output
popd >& /dev/null
mkdir -p $output_dir
cp -a $TMPFILE/tool/output/. ./$output_dir; rm -rf $TMPFILE

echo 'multiAffinity completed. Check out the output folder.'
